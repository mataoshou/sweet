package tool.file;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

public class BaseFileUtil
{
	static Logger logger = Logger.getLogger(BaseFileUtil.class);

	/**
	 * 根据多段路径，获取文件
	 */
	public static File getFile(String... paths)
	{
		if (paths == null)
			return null;
		if (paths.length <= 0)
			return null;

		File f = new File(paths[0]);
		for (int i = 1; i < paths.length; i++)
		{
			f = new File(f, paths[1]);
		}
		logger.debug("构建文件:" + f.getPath());
		return f;
	}

	/**
	 * 根据多段路径，获取文件完整路径
	 */
	public static String getFilePath(String... paths)
	{
		if (paths == null)
			return null;
		if (paths.length <= 0)
			return null;
		return getFile(paths).getPath();
	}

	/**
	 * 获取文件名称
	 */
	public static String getFileName(String path)
	{
		if (path == null)
			return null;
		if (path.length() <= 0)
			return null;
		File f = new File(path);
		return f.getName();
	}

	/**
	 * 获取文件后缀
	 */
	public static String getSuffix(String path, String def)
	{
		String fileName = new File(path).getName();
		String suffix = fileName.substring(fileName.lastIndexOf(".") + 1);
		logger.debug("文件后缀:" + suffix);
		if (suffix.length() <= 0)
		{
			return def;
		}

		return suffix;
	}

	// 获取文件后缀
	public static String getSuffix(File f)
	{
		return getSuffix(f.getPath());
	}

	// 获取文件后缀
	public static String getSuffix(String path)
	{
		String suffix = path.substring(path.lastIndexOf(".") + 1);
		return suffix;
	}
	//将文件移动到指定位置
	public static void move(File src, File dst) throws IOException
	{
		if (src.exists())
		{
			dst.getParentFile().mkdirs();
			FileUtils.moveFile(src, dst);
			logger.debug("文件从:" + src.getPath() + "移动到:" + dst.getPath());
			return;
		}
		logger.debug(src.getPath() + "文件不存在");
	}

	// 文件格式转换
	public static void copy(File src, String codeType1, File dst,
			String codeType2) throws IOException
	{
		FileUtils.writeLines(dst, codeType2,
				FileUtils.readLines(src, codeType1));
	}
}
